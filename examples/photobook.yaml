version: photobook 0.3.0
usage: |
  photobook
  
  Usage:
    photobook [options] [<src>]

  Options:
    -h, --help         Show this screen.
    -v, --version      Show version.
    -c, --config=FILE  Path to a YAML config file for photobook
    --outdir=DIR       Output directory

tokens:
  config: ^([\s\S]*?\n)---
  <image>: (T|B|L|R)?<(.*?)>
  caption: (?<=>)[\s\S]+?(?=\])
  scale: ([0-9]*\.)?[0-9]+

error: err
grammar:
  book:
    - config pages
    - pages
  pages:
    - pages page
    - page
  page:
    - '[ err ]'
    - '[ err image err ]'
    - '[ options image caption ]'
    - '[ image caption ]'
    - '[ options image ]'
    - '[ image ]'
    - '[ ]'
  options:
    - options option
    - option
  option:
    - ^
    - ^^
    - '|'
    - scale
  image: <image>

code:
  main:
    - | # py
      import yaml, os
      from pylatex import Document, NoEscape
      from pylatex.base_classes import Command

      if args['--config']:
        with open(args['--config']) as f:
          fconfig = yaml.safe_load(f)
      else:
        fconfig = {}

      def get_doc_options(options=[]):
        return map(NoEscape, [
          'layoutmode=block','blockwidth=96mm','blockheight=108mm','bleed=0mm',
          'bindingoffset=0mm','imageblockwidth=0.98','imageblockheight=0.98',
        ] + options)

      file_options = fconfig.get('options', [])
      doc = Document(documentclass='photobook', 
                     document_options=get_doc_options(file_options))

      def get_command(caption, image, ptype='ImagePage', bleed='',scale=1):
        options = [f'scale={scale}']
        arguments = map(NoEscape, [caption.strip(), image[2]])
        bleed = 'Clear' if ptype =='ImagePage' and bleed == '' else bleed
        pos = '' if bleed == 'Fill' else (image[1] or '')
        name = ptype + bleed + pos
        return Command(name, options=options, arguments=arguments)

      outdir = os.path.join(os.getcwd(), args['--outdir'] or '')
      book()
      doc.preamble.append(Command('pagestyle', arguments='empty'))

      latex_file = os.path.splitext(args['<src>'])[0] + '.tex'
      latex_path = os.path.join(outdir, latex_file)
      with open(latex_path, 'w') as file:
        doc.dump(file)
      pass
    - $ pdflatex -interaction=nonstopmode --quiet --output-directory={outdir} {latex_path}
  book:
    - | # py
      global doc, fconfig
      inline_config = yaml.safe_load(config[1])
      fconfig |= inline_config or {}
      inline_options = fconfig.get('options', [])
      doc = Document(documentclass='photobook', document_options=get_doc_options(inline_options))
      return pages()
    - pages()
  pages:
    - pages(); page()
    - page()
  page:
    - doc.append( get_command(err[0], ('', '', '')) )
    - doc.append( get_command(err[1][0], image()) )
    - doc.append( get_command(caption[0], image(), **options()) )
    - doc.append( get_command(caption[0], image()) )
    - doc.append( get_command('', image(), **options()) )
    - doc.append( get_command('', image()) )
    - doc.append( Command('emptypage') )
  options:
    - options() | option()
    - option()
  option:
    - '{"bleed": "Fit"}'
    - '{"bleed": "Fill"}'
    - '{"ptype": "ImageSpread"}'
    - '{"scale": scale[0]}'
  image: | # py
    import subprocess
    image = vars()['<image>']
    script = fconfig.get('script', None)
    linux_outdir = outdir.replace('\\', '/')
    outfile = linux_outdir + '/' + fconfig.get('prefix', '') + os.path.basename(image[2])
    if script:
      script = script.replace('infile', image[2]) if script.find('infile') != -1 else f'{script} {image[2]}'
      script = script.replace('outfile', outfile) if script.find('outfile') != -1 else f'{script} {outfile}'
      subprocess.run(script, shell=True)
      image = (image[0], image[1], outfile)
    image
  
requirements: | # pip
  PyLaTex==1.4.1
  PyYaml

tokentypes:
  config: Text
  \[|\]: Page
  \^{1,2}|\|: Option
  scale: Number
  <image>: Image
styles:
  Page: 'bold #3832a8'
  Option: '#c40818'
  Image: '#44703e'