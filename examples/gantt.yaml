version: gantt 0.0.1
usage: |
  gantt
  
  Usage:
    gantt [options] [<input>]
    gantt [-v|--verbose] [-o] <input>

  Options:
    -h --help     Show this screen.
    -v --version  Show version.
    --pdf         Output as pdf.

meta:
  tokens:
    regex: true
    ignore: " d"
    comment: "\\#.*"
  grammar:
    permissive: true
  commands:
    prefix: gantt # prefix for environment variable

tokens:
  text: ([\w ]+)
  headings: (?:\| text)+
  -----: ---+
  "|": \|
  ===: ([ ]* =+)
  "<": <
  ">": ">"

precedence:
  - !nonassoc text ----- # list of space seperated tokens
  # - !left unused
  # - !left / *

constructors:
  rows:
    - |

grammar:
  gantt: | 
    text
    -----
    headings
    rows
    -----
  rows:
    - rows row
    - row
  row: 
    - text | ===
    - text | === milestone
  milestone:
    - <text>
    - <>

code:
  start: !before | #python
    pass
  after: !after | # python
    pass
  gantt: | # python
    pass
  row:
    -
    - | # python
      pass

commands:
  gantt: cmd -o ...

requirements: PyLaTex==1.4.1

# code:
#   setup: | # python
#     doc = lambda content: r'''
#     \documentclass{article}
#     \usepackage[utf8]{inputenc}
#     \usepackage[margin = 2.5cm]{geometry}
#     \usepackage{pgfgantt}
#     \usepackage[figuresleft]{rotating}

#     \begin{document}
    
#     %s

#     \end{document}
#     ''' % content

#     sideways = False
#     scale = 1
#     fig_type = ['figure', 'sidewaysfigure']

#     gantt = lambda width, content, fig_label, caption: r'''
#     \begin{%s}
#     \noindent\resizebox{\textwidth}{!}{
#     \begin{ganttchart}[
#       vgrid, 
#       hgrid, 
#       x unit = 1cm, 
#       y unit chart= 1cm, 
#       bar/.append style={fill = lightgray}]{1}{%s}

#     %s

#     \end{ganttchart}
#     }
#     \label{%s}
#     \caption{%s}
#     \end{%s}''' % (fig_type[sideways], width, content, fig_label, caption, fig_type[sideways])

#     gantt_title = lambda title, width: r'\gantttitle{%s}{%s}' % (title, width)
#     gantt_bar = lambda label, start, end: r'\ganttbar{%s}{%s}{%s}' % (label, start, end)
#     gantt_milestone = lambda text, pos: r'\ganttmilestone[inline]{%s}{%s}' % (text, pos)

#     content = ''
  
#   vertical: | # python
#     sideways = True
  
#   horizontal: | # python
#     sideways = False

#   scale: | # python
#     scale = float(captures[1][0])

#   gantt: | # python
#     _, title, titles, labels, bars, milestones, fig_label, caption = captures
#     width = len(max(bars, key=len))
#     width += len(titles) - (width % len(titles))
#     t_width = width // len(titles)

#     t_width = round(t_width * scale)
#     width = t_width * len(titles)

#     rows = len(labels)
#     fig_label = fig_label[0]
#     caption = caption[0].strip()
    
#     _content = gantt_title(title[0].strip(), width) + r'\\' + '\n'

#     for title in titles:
#       _content += gantt_title(title.strip(), t_width)
    
#     _content += r'\\' + '\n'

#     for row in range(rows):
#       label = labels[row].strip()
#       start = round(bars[row].find('=') * scale)
#       end = round(len(bars[row]) * scale)
#       m = milestones[row]

#       if start != -1:
#         _content += gantt_bar(label, start + 1, end)

#       if m != '':
#         _content += gantt_milestone(m[1:].strip(), end)
      
#       if row == rows - 1:
#         _content += '\n'
#       else:
#         _content += r'\\' + '\n'
    
#     content += gantt(width, _content, fig_label, caption)
  
#   default: pass
  
#   result: | # python
#     document = doc(content)
#     with open(f'{src.split(".")[0]}.tex', 'w') as file:
#       file.write(document)


