Glossary
========

.. glossary::
  :sorted:

  Token Expansion [#ft1]_
    The name of the procedure called to substitute token patterns referenced in other tokens by their token identifier.
  
  Token Types
    The type of a token used for syntax highlighting.
  
  Grammar Variables [#ft1]_
    Variables created based on the symbols used in a :term:`grammar production`.
    These can be :term:`terminal` or :term:`non-terminal` variables.
    The former are :term:`token` values while the latter are functions used to traverse the :term:`AST`.

  System Configuration [#ft1]_
    The directory located at :code:`~/.serl` which is used to store system-wide languages and environments.
  
  Grammar Production
    A substitution rule with a head (non-terminal) and a body (sequence of terminals/non-terminals).
  
  Terminal
    A concrete symbol used within the syntax of a language.
  
  Token
    Synonymous with :term:`terminal`.

  Non-terminal
    A symbol used to represent a set of strings that can be generated by reducing it according to :term:`grammar productions <grammar production>`.
  
  Lexer
    A program used to break an input string up into syntactic units called :term:`tokens <token>`.

  Grammar
    A set of :term:`productions <grammar production>` used to specify the structure of a language.
  
  Parser
    A program used to verify the structure of a sequence of :term:`tokens <token>`, and create an intermediary representation such as an :term:`AST`
  
  AST
    Abstract syntax tree, the intermediary representation created after parsing.

See `Compilers: Principles, Techniques, and Tools <https://books.google.co.uk/books/about/Compilers_Principles_Techniques_and_Tool.html>`_ to learn more terminology and methods relating to language compilers.

.. [#ft1] Term definition specific to this tool (Serl).